function lab_write_hdr(filename,mri,labels)

if isfield(mri,'landmarks')
    landmarks = mri.landmarks;
end

if isfield(mri,'anatomy')
    mri = make_nii(mri.anatomy,abs(diag(mri.transform(1:3,1:3))),abs(mri.transform(1:3,4))');
elseif ~isfield(mri,'img')
    disp('   Abort: no valid mri')
    return
end

if all(mri.img(:) <= 255)
    typeMatlab   = 'uint8';
elseif all(mri.img(:) < 32767)
    typeMatlab   = 'int16';
elseif all(mri.img(:) < 2147483647)
    typeMatlab   = 'int32';
else
    typeMatlab   = 'double';
end

switch (typeMatlab)
    case 'uint8'
        hdr.datatype = 2;
        hdr.bitpix   = 8;
        mri.img  = uint8(mri.img);
    case 'int16'
        hdr.datatype = 4;
        hdr.bitpix   = 16;
        mri.img  = int16(mri.img);
    case 'int32'
        hdr.datatype = 8;
        hdr.bitpix   = 32;
        mri.img  = int32(mri.img);
    case 'double'
        hdr.datatype = 32;
        hdr.bitpix   = 64;
        mri.img  = round(mri.img);
end
% Size of the volume
volDim = floor(size(mri.img));
pixDim = mri.hdr.dime.pixdim(2:4);
% Set up other field values
hdr.dim    = [4 volDim 1 0 0 0];
hdr.pixdim = [1 pixDim 1  0 0 0];
hdr.glmax  = max(mri.img(:));


% Open file for binary writing
[fid, message] = fopen([filename(1:end-4) '.hdr'], 'wb');
if (fid == -1)
   error('Error opening header file \n%s', message);
end


% ===== SECTION 'header_key' =====
z = @(n)zeros(1,n);
fwrite(fid, 348,     'uint32');   % sizeof_hdr
fwrite(fid, z(10),   'uchar');    % data_type
fwrite(fid, z(18),   'uchar');    % db_name
fwrite(fid, 0,       'uint32');   % extents
fwrite(fid, 0,       'uint16');   % session_error
fwrite(fid, 'r',     'uchar');    % regular
fwrite(fid, 0,       'uchar');    % hkey_un0

% ===== SECTION 'image_dimension' =====
fwrite(fid, hdr.dim, 'uint16');     % dim
fwrite(fid, 'mm  ',  'uchar');      % vox_units
fwrite(fid, z(8),    'uchar');      % cal_units
fwrite(fid, 0,       'uint16');     % unused1
fwrite(fid, hdr.datatype, 'uint16');% datatype
fwrite(fid, hdr.bitpix, 'uint16');  % bitpix
fwrite(fid, 0,       'uint16');     % dim_un0
fwrite(fid, hdr.pixdim,     'float32'); % pixdim
fwrite(fid, 0, 'float32'); % vox_offset
fwrite(fid, 1,     'float32');      % funused1
fwrite(fid, 0,     'float32');      % funused2
fwrite(fid, 0,     'float32');      % funused3
fwrite(fid, 0,         'float32');  % cal_max
fwrite(fid, 0,         'float32');  % cal_min
fwrite(fid, 0,         'float32');  % compressed
fwrite(fid, 0,         'uint32');   % verified
fwrite(fid, hdr.glmax, 'uint32');   % glmax
fwrite(fid, 0,         'uint32');


% ===== SECTION 'data_history' =====
desc = z(80);
desc(1:36) = 'Generated by TAPEEG; Orientation=RAS';
fwrite(fid, desc,  'uchar');     % descrip
fwrite(fid, z(24), 'uchar');     % aux_file 
fwrite(fid, 0, 'uchar');         % orient
fwrite(fid, mri.hdr.hist.originator, 'int16');% originator
fwrite(fid, z(10), 'uchar');     % generated
fwrite(fid, z(10), 'uchar');     % scannum
fwrite(fid, z(10), 'uchar');     % patient_id
fwrite(fid, z(10), 'uchar');     % exp_date
fwrite(fid, z(10), 'uchar');     % exp_time
fwrite(fid, z(3), 'uchar');      % hist_un0
fwrite(fid, 0, 'uint32');        % views
fwrite(fid, 0, 'uint32');        % vols_added
fwrite(fid, 0, 'uint32');        % start_field
fwrite(fid, 0, 'uint32');        % field_skip
fwrite(fid, 0, 'uint32');        % omax
fwrite(fid, 0, 'uint32');        % omin
fwrite(fid, 0, 'uint32');        % smax
fwrite(fid, 0, 'uint32');        % smin
      
% ===== SAVE ANALYZE VOLUME (.IMG) =====
% Close header file and open image file
fclose(fid);
[fid, message] = fopen([filename(1:end-4) '.img'], 'wb');
if fid == -1
    error('Error opening image file: "%s".', message);
end

% Dimensions
% Nx = hdr.dim(2);    % Number of pixels in X
% Ny = hdr.dim(3);    % Number of pixels in Y
Nz = hdr.dim(4);      % Number of Z slices
% Nt = hdr.dim(5);    % Number of time frames

% Write image file
%Nxy = Nx*Ny;
% for t = 1:Nt
for z = 1:Nz
    count = fwrite(fid, mri.img(:,:,z), typeMatlab);
    %       if (count ~= Nxy)
    %           fclose(fid);
    %           error('Error writing file');
    %       end
end
% end
fclose(fid);

if exist('labels','var')
    fid = fopen([filename(1:end-4) '.txt'], 'wb');
    for i = 1:length(labels)
        fprintf(fid,[labels{i} '\r\n']);
    end
    fclose(fid);
end

if exist('landmarks','var')
    save([filename(1:end-4) '.lmrk'],'landmarks');
end
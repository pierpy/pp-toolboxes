A brief comment on using the legendflex.m function with the LaTeX interpreter:

Unfortunately, the Latex renderer doesn't play very nicely with legendflex.  It's something that bugs me in my own work too, but I've never been able to come up with a good workaround that would position things properly.  The legendflex function repositions everything using the 'Extent' property of all the text in the original legend.  However, the extent property of latex-rendered text doesn't always match up with the actual space taken up by the text... not quite sure why this is, and therefore I don't have a reliable way to calculate what that real space is. 

Here's an example using plain text objects.  Ideally, the red boxes would surround each text object, but in the Latex case, it often doesn't.

-----

figure;
ax(1) = subplot(2,1,1);
ax(2) = subplot(2,1,2);

txt = {'Data 1', '$\frac{1}{2}$', '$var_{ij}$'};
nt = length(txt);
na = length(ax);

set(ax, 'xlim', [0 4], 'ylim', [0 4]);

for ii = 1:na
    ht(ii,:) = text(1:3,1:3,txt, 'parent', ax(ii));
end

set(ht(2,:), 'interpreter', 'latex');

for ii = 1:na
    for it = 1:nt
        ex = get(ht(ii,it), 'extent');
        rectangle('position', ex, 'parent', ax(ii), 'edgecolor', 'r');
    end
end

-----

Becuase of this, you really need to play around with properties in order to get a legendflex legend that uses latex and looks decent.  Sometimes generating the legend first, then setting the latex rendering afterwards will help a bit.  Other times I generate the legend using a larger font size, then shrink the text back down after it's been positioned.  None of these hacks are ideal, but they're the best I've been able to come up with.